## Archive Folder Summary

This document provides a textual summary of the contents within the `archive` folder.

### Folder Structure and Contents

- **`common/`**: Contains common Python scripts (`config.py`, `utils.py`) used across different project modules.
- **`crop_demo_assets/`**: Intended for crop-related demo assets, currently empty.
- **`data/`**: Holds all data files, categorized as follows:
  - **`optimized/`**: Contains optimized and processed satellite imagery data in `.npy` and `.tif` formats. Key files include:
    - `catalog.json`: A JSON file cataloging flood events and their associated data.
    - Sentinel-1 pre-flood and flood imagery for various locations.
    - Flood masks for the corresponding areas.
  - **`rapid_processed/`**: Contains preprocessed training and validation data (`train_data.npz`, `val_data.npz`).
- **`demo_data_raw/`**: Includes raw demonstration data, such as `dem.npy` (Digital Elevation Model) and Sentinel-1/2 imagery.
- **`outputs/`**: Stores the output of the data processing and modeling, including the trained model `optimized_flood_model.pt`.

### Flood Event Catalog (`catalog.json`)

The `catalog.json` file provides metadata for the following three flood events:

1.  **Pakistan, Dadu (2022)**
    - **Date**: 2022-08-28
    - **Affected Population**: 500,000
    - **Data**: `S1_Pakistan_Dadu_2022_pre.tif`, `S1_Pakistan_Dadu_2022_flood.tif`, `mask_Pakistan_Dadu_2022.tif`

2.  **Bangladesh, Sylhet (2022)**
    - **Date**: 2022-06-17
    - **Affected Population**: 200,000
    - **Data**: `S1_Bangladesh_Sylhet_2022_pre.tif`, `S1_Bangladesh_Sylhet_2022_flood.tif`, `mask_Bangladesh_Sylhet_2022.tif`

3.  **India, Bangalore (2022)**
    - **Date**: 2022-09-05
    - **Affected Population**: 100,000
    - **Data**: `S1_India_Bangalore_2022_pre.tif`, `S1_India_Bangalore_2022_flood.tif`, `mask_India_Bangalore_2022.tif`

### Model Output

The `outputs` folder contains a PyTorch model file, `optimized_flood_model.pt`, which is the trained model for flood detection based on the provided data.

## Crop Demo Final Summary

This document provides a textual summary of the contents and purpose of the `crop_demo_final` folder.

### Overview

The `crop_demo_final` folder contains a demonstration of the HawkEYE Crop Intelligence Engine. This demo showcases an end-to-end workflow for identifying crop stress in the Jessore region of Bangladesh using self-supervised learning and unsupervised clustering on satellite imagery.

### Folder Structure

- **`crop_demo_assets/`**: Contains visual assets generated by the demo, including:
  - `jessore_rgb_preview.png`: An RGB image of the area of interest.
  - `jessore_stress_overlay.png`: An image showing the identified crop stress areas overlaid on the RGB preview.
  - `charts/crop_explainer_grid.png`: A 2x2 grid visualizing the analysis process.
- **`crop_demo_data_processed/`**: Contains the final processed `stress_map.npy` file.
- **`crop_demo_data_raw/`**: Contains the raw, multi-modal satellite data (`multimodal_jessore.npy`).
- **`crop_demo_models/`**: Stores the trained self-supervised backbone model (`crop_ssl_backbone.pt`).
- **`generate_crop_explainer.py`**: A Python script to generate the `crop_explainer_grid.png`.
- **`model_report_crop_ultimate.json`**: A JSON file containing a summary of the model's results.
- **`run_corrected_crop_demo.py`**: The main Python script that executes the entire crop stress analysis pipeline.

### Model Report Summary (`model_report_crop_ultimate.json`)

The model report provides a high-level summary of the analysis:
- **Model**: HawkEYE Crop Intelligence Engine (hawkeye-crop-v1)
- **Objective**: Identify hidden crop stress patterns from raw satellite data using self-supervised AI.
- **Key Results**:
  - **Estimated Stressed Area**: 8.27%
  - **Clusters Identified**: 4
  - **Key Insight**: The model successfully identified significant areas of potential crop stress.

### Python Scripts

1.  **`run_corrected_crop_demo.py`**:
    - **Purpose**: This is the main script that orchestrates the entire demo.
    - **Workflow**:
      1.  **Data Acquisition**: Pulls Sentinel-2 and Digital Elevation Model (DEM) data from Google Earth Engine for the Jessore region.
      2.  **Self-Supervised Learning**: Trains a simple backbone model using SimSiam on image tiles to learn features from the data without labels.
      3.  **Unsupervised Clustering**: Uses K-Means clustering on vegetation indices (NDVI, NDWI) and other features to identify 4 distinct clusters, one of which represents crop stress.
      4.  **Report Generation**: Generates the `model_report_crop_ultimate.json` and visual assets.

2.  **`generate_crop_explainer.py`**:
    - **Purpose**: This script generates a visual summary of the analysis process.
    - **Output**: Creates a 2x2 grid image (`crop_explainer_grid.png`) that shows:
      1.  The true-color satellite view.
      2.  The calculated Normalized Difference Vegetation Index (NDVI).
      3.  The calculated Normalized Difference Water Index (NDWI).
      4.  The final AI-discovered stress map.

### Key Assets

- **`stress_map.npy`**: The final output of the analysis, a NumPy array representing the crop stress map.
- **`jessore_stress_overlay.png`**: A human-readable visualization of the `stress_map.npy` overlaid on the RGB image.
- **`model_report_crop_ultimate.json`**: The primary textual output summarizing the findings.

## Final Flourish Summary

This document provides a textual summary of the contents and purpose of the `final flourish` folder.

### Overview

The `final flourish` folder contains a comprehensive project focused on dengue forecasting in Dhaka, Bangladesh, referred to as "HawkEye Omega." It integrates various data sources, including public health data, weather, satellite imagery, and economic indicators, to analyze and predict dengue outbreaks. The project exists in at least two versions, with `v4` being the latest and most robust.

### Folder Structure

- **`data/`**: Contains the core data for the project.
  - **`processed/`**: Cleaned and processed CSV files ready for analysis (dengue cases, population, weather, nightlights).
  - **`raw/`**: A large collection of raw data files, including PDF reports on dengue, census data, and various economic and environmental datasets.
- **`reports/` and `reports_v4/`**: These folders contain the outputs of the analysis. `reports_v4` contains the outputs of the latest version of the script.
  - **`figures/`**: Contains generated images, such as dashboards and satellite imagery visualizations.
  - **`hawkeye_v4_analysis_report.json`**: The main JSON output of the `v4` analysis, containing a wealth of structured data.
- **`scripts/`**: A collection of Python and PowerShell scripts for data processing, including scripts for downloading and extracting data from dengue PDF reports.
- **`run_hawkeye_omega_corrected.py` and `run_hawkeye_omega_v4_corrected.py`**: The main Python scripts for running the analysis. The `v4` script is the most recent and functional.
- **`DATASET_ANALYSIS_REPORT.md`**: A detailed markdown file that provides a comprehensive overview of the entire `MyNewProject` workspace, not just the `final flourish` folder.

### Key Documents and Scripts

1.  **`hawkeye_v4_analysis_report.json`**: This is the primary output of the project. It is a detailed JSON file containing:
    - Metadata about the analysis.
    - A summary of the data used.
    - Correlation analysis between dengue cases and various factors (weather, economic).
    - Detailed statistics on disease trends, weather, etc.
    - A 14-day forecast of dengue cases.
    - Satellite data analysis (nightlight radiance as an economic proxy).
    - Economic impact calculations.
    - Key findings and limitations.

2.  **`DATASET_ANALYSIS_REPORT.md`**: This document provides a high-level overview of all the projects within the `MyNewProject` workspace. It details the purpose, technology, and status of each project, and also contains important information like API keys and project IDs.

3.  **`run_hawkeye_omega_v4_corrected.py`**: This is the main script for the `v4` analysis. It is a well-structured and pragmatic script that:
    - Loads and processes all available data.
    - Fetches live weather data.
    - Performs statistical analysis and generates a simple forecast.
    - Calculates economic impacts.
    - Integrates with Google Earth Engine for satellite data.
    - Generates the final JSON report and a visual dashboard.

### Summary of Findings (from `hawkeye_v4_analysis_report.json`)

- **Disease Trend**: The trend of dengue cases is actively monitored and reported as either "increasing" or "decreasing."
- **Correlations**: Significant correlations have been found between dengue cases and both temperature and economic factors.
- **Economic Impact**: The report includes calculations of the economic burden of dengue, including healthcare costs and productivity loss.
- **Forecasting**: A simple, trend-based 14-day forecast is provided, with a note on its high uncertainty.
- **Satellite Analysis**: Nightlight radiance data is used as a proxy for economic activity, and its trend is analyzed.

## Flood Folder Summary

This document provides a textual summary of the contents and purpose of the `flood` folder.

### Overview

The `flood` folder contains a focused demonstration of the HawkEYE Ultimate Flood Intelligence system. This demo focuses on a specific flood event in Sylhet, Bangladesh (2022), showcasing the use of multi-modal satellite data (SAR, Optical, DEM) and an advanced Vision Transformer (SegFormer) model for accurate flood detection and visualization.

### Folder Structure

- **`01_demo_data_pull.py`**: A Python script responsible for acquiring raw satellite imagery and Digital Elevation Model (DEM) data from Google Earth Engine for the specified flood event.
- **`02_demo_model_train.py`**: The main Python script that handles model training, prediction, and asset generation for the demo.
- **`demo_assets/`**: Contains various visual outputs generated by the demo:
  - **`charts/`**: Includes `loss_curve.png` (showing training progress) and `flood_explainer_grid.png` (a visualization of the analysis process).
  - **`hero/`**: Contains `final_mask.png` (the raw flood detection mask) and `prediction_overlay.png` (the flood prediction overlaid on the original image).
  - **`maps/`**: Includes `prediction_heatmap.png` (a heatmap of flood probability).
- **`demo_data_raw/`**: Stores the raw `.npy` satellite data (Sentinel-1 pre-flood, Sentinel-1 flood, Sentinel-2 flood) and DEM data pulled by `01_demo_data_pull.py`.
- **`demo_models/`**: Contains the trained flood detection model (`hawkeye_flood_model.pt`).
- **`generate_flood_explainer.py`**: A Python script to generate the `flood_explainer_grid.png` for explaining the flood detection process.
- **`model_report_flood_ultimate.json`**: A JSON file summarizing the model's metadata and quantitative/qualitative results.

### Key Documents and Scripts

1.  **`model_report_flood_ultimate.json`**: This JSON report provides a concise summary of the flood detection model:
    - **Model**: HawkEYE Ultimate Flood Intelligence (hawkeye-flood-ultimate-v1).
    - **Key Insight**: The model successfully identified inundated areas by fusing SAR change detection and optical imagery.
    - **Confidence**: High, based on multi-modal data fusion and spatial consistency.
    - **Artifacts**: Links to generated images like the loss curve, prediction overlay, and heatmap.

2.  **`01_demo_data_pull.py`**: This script connects to Google Earth Engine (GCP_PROJECT = "hyperion-472805") to download multi-modal satellite data (Sentinel-1 SAR, Sentinel-2 Optical, and SRTM DEM) for the Sylhet, Bangladesh (2022) flood event. It saves these as `.npy` files in `demo_data_raw/`.

3.  **`02_demo_model_train.py`**: This is the core script for the demo, performing the following steps:
    - **Data Preparation**: Loads and normalizes raw data, creates a pseudo flood mask for training, and tiles the data for input to the model.
    - **Model Training**: Trains a `HawkEYEModel` (based on SegFormer-B2-lite) for semantic segmentation of flood areas. It logs training and validation loss and saves the trained model (`hawkeye_flood_model.pt`).
    - **Asset Generation**: Generates visual outputs including `final_mask.png`, `prediction_heatmap.png`, and `prediction_overlay.png` to visualize the flood detection results.
    - **Report Generation**: Updates `model_report_flood_ultimate.json` with the estimated flood area percentage and links to the generated visual artifacts.

### Summary of Outputs

- **Trained Model**: `hawkeye_flood_model.pt` (a SegFormer-B2-lite model).
- **Visualizations**:
  - **`loss_curve.png`**: Illustrates the model's training and validation loss over epochs.
  - **`final_mask.png`**: A binary image showing the detected flood extent.
  - **`prediction_heatmap.png`**: A color-coded map indicating the probability of flooding.
  - **`prediction_overlay.png`**: A combined image showing the detected flood areas overlaid on a true-color satellite image.
- **Textual Report**: `model_report_flood_ultimate.json` provides a structured summary of the model, its insights, and links to all generated assets.

## Presentation Materials Summary

This document provides a textual summary of the contents and purpose of the `presentation_materials` folder.

### Overview

The `presentation_materials` folder contains a comprehensive collection of assets for presenting the flood detection AI system. It is structured to support an investor-ready presentation, including slides, technical results, and documentation. The materials are organized into numbered sections for easy navigation and presentation flow.

### Folder Structure

- **`01_data/`**: Contains data acquisition summaries and visualizations.
  - `acquisition_summary.json`: A JSON file with metadata about the data acquisition process.
  - `acquisition_summary.png`: A visual summary of the data acquisition process.
- **`02_preprocessing/`**: Contains images and data related to the preprocessing of satellite data.
  - `preprocessing_samples.png`: Sample images showing the preprocessing steps.
  - `preprocessing_statistics.png`: Statistical summaries of the preprocessing pipeline.
- **`03_model/`**: Contains visualizations of the model architecture.
  - `model_architecture.png`: A diagram of the neural network architecture.
- **`04_results/`**: Contains the results of the model's inference and performance metrics.
  - `inference_results.png`: Visualizations of the model's flood detection results.
  - `performance_metrics.png`: Charts and graphs showing the model's performance metrics.
- **`05_visualizations/`**: Currently empty, but intended for additional visualizations.
- **`06_statistics/`**: Currently empty, but intended for statistical analyses.
- **`07_slides/`**: Contains the main presentation slides.
  - `01_title_slide.png`: The title slide for the presentation.
  - `02_comparison.png`: A slide comparing the system's performance to traditional methods.
  - `03_business_impact.png`: A slide highlighting the business impact and ROI.
- **`executive_summary.md`**: A detailed markdown file providing a comprehensive overview of the system, its technical achievements, business impact, and deployment roadmap.
- **`index.html`**: An HTML dashboard that serves as the main entry point for the presentation materials, providing links to all assets and a structured view of the content.

### Key Documents and Assets

1.  **`executive_summary.md`**: This document is the cornerstone of the presentation materials. It provides a detailed overview of the flood detection AI system, including:
    - **System Overview**: A high-level description of the system and its capabilities.
    - **Technical Achievements**: Details on data processing, model architecture, and performance metrics.
    - **Competitive Advantages**: A comparison table highlighting improvements over traditional methods.
    - **Business Impact**: Information on cost savings, time efficiency, and the number of lives impacted.
    - **Deployment Roadmap**: A phased plan for expanding the system globally.
    - **Technical Specifications**: Input/output details, accuracy, latency, and scalability.
    - **Key Innovations**: A list of the system's unique features.
    - **Validation & Testing**: Information on testing and validation processes.
    - **Partnership Opportunities**: Potential collaboration areas with government, insurance, and humanitarian sectors.
    - **Investment Highlights**: Market size, growth rate, and revenue model.

2.  **`index.html`**: This HTML file serves as a dashboard for the presentation materials. It is structured to provide easy access to all assets, including:
    - **Presentation Slides**: Links to the main slides in `07_slides/`.
    - **Technical Results**: Links to images and data in `01_data/`, `02_preprocessing/`, `03_model/`, and `04_results/`.
    - **Documentation**: Links to the executive summary and technical specifications.

### Summary of Outputs

- **Presentation Slides**: Three main slides (`01_title_slide.png`, `02_comparison.png`, `03_business_impact.png`) for investor presentations.
- **Technical Visualizations**: Images and charts detailing the data acquisition, preprocessing, model architecture, and results.
- **Documentation**: The `executive_summary.md` provides a comprehensive textual overview of the system, its achievements, and its potential impact.
